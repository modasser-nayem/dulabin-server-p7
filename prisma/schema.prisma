// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  name String
  email String
  password String
  bio String?
  photoURL String?
  dateOfBirth DateTime?
  lastLoginAt DateTime?
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  comments Comment[]
  reactions Reaction[]

  @@map("users")
}

model Post {
  id String @id @default(uuid())
  userId String
  content String
  mediaType MediaType
  mediaURL String[]
  privacy  PostPrivacy
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  comments Comment[]
  reactions Reaction[]

  @@map("posts")
}

model Comment {
  id String @id @default(uuid())
  userId String 
  postId String
  content String
  status CommentStatus @default(unhide)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  reactions Reaction[]

  @@map("comments")
}

model Reaction {
  id String @id @default(uuid())
  userId String 
  postId String
  commentId String?
  reaction ReactOption
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@map("reactions")
}

enum MediaType {
  text
  video
  image
}

enum PostPrivacy {
  public
  friends
  private
}

enum CommentStatus {
  hide
  unhide
}

enum ReactOption {
  like
  dislike
}
